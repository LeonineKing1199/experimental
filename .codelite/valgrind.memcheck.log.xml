<?xml version="1.0"?>

<valgrindoutput>

<protocolversion>4</protocolversion>
<protocoltool>memcheck</protocoltool>

<preamble>
  <line>Memcheck, a memory error detector</line>
  <line>Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.</line>
  <line>Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info</line>
  <line>Command: ./UnrolledList</line>
</preamble>

<pid>28524</pid>
<ppid>28523</ppid>
<tool>memcheck</tool>

<args>
  <vargv>
    <exe>/usr/bin/valgrind.bin</exe>
    <arg>--tool=memcheck</arg>
    <arg>--xml=yes</arg>
    <arg>--fullpath-after=</arg>
    <arg>--gen-suppressions=all</arg>
    <arg>--xml-file=/home/christian/experimental/.codelite/valgrind.memcheck.log.xml</arg>
    <arg>--suppressions=/home/christian/experimental/.codelite/valgrind.memcheck.supp</arg>
    <arg>--leak-check=yes</arg>
    <arg>--track-origins=yes</arg>
  </vargv>
  <argv>
    <exe>./UnrolledList</exe>
  </argv>
</args>

<status>
  <state>RUNNING</state>
  <time>00:00:00:00.098 </time>
</status>


<status>
  <state>FINISHED</state>
  <time>00:00:00:00.920 </time>
</status>

<error>
  <unique>0x0</unique>
  <tid>1</tid>
  <kind>Leak_PossiblyLost</kind>
  <xwhat>
    <text>66 bytes in 1 blocks are possibly lost in loss record 1 of 2</text>
    <leakedbytes>66</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x4C2B0E0</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator new(unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x4EF6E68</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21</obj>
      <fn>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x4EF7C4A</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21</obj>
      <fn>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x4EF7CF3</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21</obj>
      <fn>std::string::reserve(unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x4EF7F62</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21</obj>
      <fn>std::string::append(char const*, unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x401151</ip>
      <obj>/home/christian/experimental/UnrolledList/Debug/UnrolledList</obj>
      <fn>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, char const*)</fn>
      <dir>/usr/include/c++/5/bits</dir>
      <file>basic_string.h</file>
      <line>4888</line>
    </frame>
    <frame>
      <ip>0x4013FE</ip>
      <obj>/home/christian/experimental/UnrolledList/Debug/UnrolledList</obj>
      <fn>void it&lt;utils_bit_tests()::{lambda()#1}::operator()() const::{lambda()#2}&gt;(char const*, utils_bit_tests()::{lambda()#1}::operator()() const::{lambda()#2})</fn>
      <dir>/home/christian/experimental/UnrolledList/test/debug-tests/../helpers</dir>
      <file>helpers.hpp</file>
      <line>17</line>
    </frame>
    <frame>
      <ip>0x40127A</ip>
      <obj>/home/christian/experimental/UnrolledList/Debug/UnrolledList</obj>
      <fn>utils_bit_tests()::{lambda()#1}::operator()() const</fn>
      <dir>/home/christian/experimental/UnrolledList/test/debug-tests</dir>
      <file>utils-bit-tests.cpp</file>
      <line>27</line>
    </frame>
    <frame>
      <ip>0x4014BE</ip>
      <obj>/home/christian/experimental/UnrolledList/Debug/UnrolledList</obj>
      <fn>void describe&lt;utils_bit_tests()::{lambda()#1}&gt;(char const*, utils_bit_tests()::{lambda()#1})</fn>
      <dir>/home/christian/experimental/UnrolledList/test/debug-tests/../helpers</dir>
      <file>helpers.hpp</file>
      <line>10</line>
    </frame>
    <frame>
      <ip>0x40129C</ip>
      <obj>/home/christian/experimental/UnrolledList/Debug/UnrolledList</obj>
      <fn>utils_bit_tests()</fn>
      <dir>/home/christian/experimental/UnrolledList/test/debug-tests</dir>
      <file>utils-bit-tests.cpp</file>
      <line>28</line>
    </frame>
    <frame>
      <ip>0x400E2B</ip>
      <obj>/home/christian/experimental/UnrolledList/Debug/UnrolledList</obj>
      <fn>debug_tests()</fn>
      <dir>/home/christian/experimental/UnrolledList/test/debug-tests</dir>
      <file>debug-tests.cpp</file>
      <line>6</line>
    </frame>
    <frame>
      <ip>0x400CAE</ip>
      <obj>/home/christian/experimental/UnrolledList/Debug/UnrolledList</obj>
      <fn>main</fn>
      <dir>/home/christian/experimental/UnrolledList</dir>
      <file>main.cpp</file>
      <line>5</line>
    </frame>
  </stack>
  <suppression>
    <sname>insert_a_suppression_name_here</sname>
    <skind>Memcheck:Leak</skind>
    <skaux>match-leak-kinds: possible</skaux>
    <sframe> <fun>_Znwm</fun> </sframe>
    <sframe> <fun>_ZNSs4_Rep9_S_createEmmRKSaIcE</fun> </sframe>
    <sframe> <fun>_ZNSs4_Rep8_M_cloneERKSaIcEm</fun> </sframe>
    <sframe> <fun>_ZNSs7reserveEm</fun> </sframe>
    <sframe> <fun>_ZNSs6appendEPKcm</fun> </sframe>
    <sframe> <fun>_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EOS6_PKS3_</fun> </sframe>
    <sframe> <fun>_Z2itIZZ15utils_bit_testsvENKUlvE_clEvEUlvE0_EvPKcT_</fun> </sframe>
    <sframe> <fun>_ZZ15utils_bit_testsvENKUlvE_clEv</fun> </sframe>
    <sframe> <fun>_Z8describeIZ15utils_bit_testsvEUlvE_EvPKcT_</fun> </sframe>
    <sframe> <fun>_Z15utils_bit_testsv</fun> </sframe>
    <sframe> <fun>_Z11debug_testsv</fun> </sframe>
    <sframe> <fun>main</fun> </sframe>
    <rawtext>
<![CDATA[
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: possible
   fun:_Znwm
   fun:_ZNSs4_Rep9_S_createEmmRKSaIcE
   fun:_ZNSs4_Rep8_M_cloneERKSaIcEm
   fun:_ZNSs7reserveEm
   fun:_ZNSs6appendEPKcm
   fun:_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EOS6_PKS3_
   fun:_Z2itIZZ15utils_bit_testsvENKUlvE_clEvEUlvE0_EvPKcT_
   fun:_ZZ15utils_bit_testsvENKUlvE_clEv
   fun:_Z8describeIZ15utils_bit_testsvEUlvE_EvPKcT_
   fun:_Z15utils_bit_testsv
   fun:_Z11debug_testsv
   fun:main
}
]]>
    </rawtext>
  </suppression>
</error>

<errorcounts>
</errorcounts>

<suppcounts>
</suppcounts>

</valgrindoutput>

